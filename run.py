#!/usr/bin/env python3
"""
Script de inicio para el Comparador de Fondos de Im√°genes
Verifica dependencias y ejecuta la aplicaci√≥n
"""

import sys
import subprocess
import importlib
import os

def check_python_version():
    """Verifica que la versi√≥n de Python sea compatible"""
    if sys.version_info < (3, 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print(f"   Tu versi√≥n: {sys.version}")
        sys.exit(1)
    else:
        print(f"‚úÖ Python {sys.version.split()[0]} - Compatible")

def check_dependencies():
    """Verifica que las dependencias est√©n instaladas"""
    required_packages = [
        'flask',
        'PIL',
        'cv2',
        'numpy',
        'sklearn',
        'scipy',
        'skimage'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'PIL':
                importlib.import_module('PIL')
            elif package == 'cv2':
                importlib.import_module('cv2')
            elif package == 'skimage':
                importlib.import_module('skimage')
            else:
                importlib.import_module(package)
            print(f"‚úÖ {package} - Instalado")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} - No encontrado")
    
    return missing_packages

def install_dependencies():
    """Instala las dependencias faltantes"""
    print("\nüì¶ Instalando dependencias...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error instalando dependencias")
        return False

def check_files():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    required_files = [
        'main.html',
        'main.css',
        'main.js',
        'app.py',
        'requirements.txt'
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} - Encontrado")
        else:
            missing_files.append(file)
            print(f"‚ùå {file} - No encontrado")
    
    return missing_files

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando Comparador de Fondos de Im√°genes...")
    print("=" * 50)
    
    # Verificar versi√≥n de Python
    print("\nüêç Verificando Python...")
    check_python_version()
    
    # Verificar archivos
    print("\nüìÅ Verificando archivos...")
    missing_files = check_files()
    if missing_files:
        print(f"\n‚ùå Faltan archivos: {', '.join(missing_files)}")
        print("   Aseg√∫rate de tener todos los archivos del proyecto")
        sys.exit(1)
    
    # Verificar dependencias
    print("\nüì¶ Verificando dependencias...")
    missing_packages = check_dependencies()
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Faltan paquetes: {', '.join(missing_packages)}")
        response = input("¬øQuieres instalarlos autom√°ticamente? (s/n): ")
        
        if response.lower() in ['s', 'si', 'y', 'yes']:
            if not install_dependencies():
                sys.exit(1)
        else:
            print("üí° Instala las dependencias manualmente con:")
            print("   pip install -r requirements.txt")
            sys.exit(1)
    
    print("\n" + "=" * 50)
    print("‚úÖ Todas las verificaciones pasaron")
    print("üåê Iniciando servidor web...")
    print("üìç URL: http://localhost:5000")
    print("üõë Presiona Ctrl+C para detener el servidor")
    print("=" * 50)
    
    # Importar e iniciar la aplicaci√≥n
    try:
        from app import app
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\n\nüëã Servidor detenido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error iniciando la aplicaci√≥n: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 