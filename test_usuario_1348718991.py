#!/usr/bin/env python3
"""
üéØ AN√ÅLISIS USUARIO 1348718991 - Usuario con cruces conocidos
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from analizador_con_mcp_integrado import AnalizadorConMCPIntegrado

async def main():
    user_id = "1348718991"
    print(f"\nüéØ ANALIZANDO USUARIO CON CRUCES CONOCIDOS: {user_id}")
    print("="*80)
    print("üìã Este usuario deber√≠a tener cruces con:")
    print("   ‚Ä¢ 1879313474 (conexi√≥n device)")
    print("   ‚Ä¢ 749782133 (conexi√≥n identity)")
    print("="*80)
    
    analizador = AnalizadorConMCPIntegrado()
    
    try:
        resultado = analizador.analizar_usuario(user_id)
        
        print(f"\nüìä RESULTADO FINAL:")
        print("="*60)
        print(f"Usuario: {user_id}")
        print(f"Decisi√≥n: {resultado.get('decision', 'N/A')}")
        print(f"Puntaje: {resultado.get('puntaje', 'N/A')}")
        print(f"Raz√≥n: {resultado.get('razon', 'N/A')}")
        
        # Mostrar detalles espec√≠ficos de cruces
        if 'detalles' in resultado:
            detalles = resultado['detalles']
            if 'cruces_riesgo' in detalles:
                cruces = detalles['cruces_riesgo']
                print(f"\nüîó DETALLES DE CRUCES:")
                print(f"   ‚Ä¢ Tiene cruces: {cruces.get('tiene_cruces', 'N/A')}")
                print(f"   ‚Ä¢ Tipos: {cruces.get('tipos_cruces', [])}")
                print(f"   ‚Ä¢ Descripci√≥n: {cruces.get('descripcion', 'N/A')}")
                
                if 'detalles_mcp' in cruces:
                    mcp_details = cruces['detalles_mcp']
                    print(f"\nüì° DATOS MCP DETALLADOS:")
                    
                    subgraph = mcp_details.get('subgraph', {})
                    print(f"   üï∏Ô∏è Subgrafo:")
                    print(f"      ‚Ä¢ Conexiones: {subgraph.get('total_connections', 0)}")
                    print(f"      ‚Ä¢ Sospechosas: {subgraph.get('has_suspicious_connections', False)}")
                    
                    fraud = mcp_details.get('fraud_analysis', {})
                    print(f"   üö® An√°lisis fraude:")
                    print(f"      ‚Ä¢ Conexiones fraudulentas: {fraud.get('fraud_connections', 0)}")
                    print(f"      ‚Ä¢ Saltos a fraude: {fraud.get('hops_to_fraud', 'N/A')}")
                    print(f"      ‚Ä¢ Nivel riesgo: {fraud.get('risk_level', 'N/A')}")
        
        print(f"\n‚úÖ AN√ÅLISIS COMPLETADO")
        return resultado
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(main())




















