#!/usr/bin/env python3
"""
Consulta específica: Casos cerrados por revisión manual de malware - ATO Fintech
Período: Junio y Julio 2024
"""

from bigquery_config import quick_query
import pandas as pd

def consulta_casos_malware_ato():
    """
    Obtiene casos cerrados por revisión manual de malware del área ATO fintech
    para junio y julio 2024
    """
    
    query = """
    SELECT 
        c.case_id,
        c.user_id,
        c.fecha_cierre,
        c.gestor_caso,
        c.area,
        c.tipo_revision,
        c.motivo_cierre,
        b.action_type,
        b.action_result,
        b.reviewer_id
    FROM 
        `meli-bi-data.SBOX_PFFINTECHATO.CONSULTAS_ATO` c
    INNER JOIN 
        `meli-bi-data.WHOWNER.BT_ACTION_MR` b
        ON c.case_id = b.case_id
    WHERE 
        -- Filtrar por área ATO fintech
        UPPER(c.area) LIKE '%ATO%' 
        AND UPPER(c.area) LIKE '%FINTECH%'
        
        -- Filtrar por revisión manual de malware
        AND (
            UPPER(c.tipo_revision) LIKE '%MANUAL%' 
            OR UPPER(b.action_type) LIKE '%MANUAL%'
        )
        AND (
            UPPER(c.motivo_cierre) LIKE '%MALWARE%'
            OR UPPER(b.action_result) LIKE '%MALWARE%'
            OR UPPER(c.tipo_revision) LIKE '%MALWARE%'
        )
        
        -- Filtrar por casos cerrados
        AND c.estado = 'CERRADO'
        
        -- Filtrar por período: junio y julio 2024
        AND c.fecha_cierre >= '2024-06-01'
        AND c.fecha_cierre < '2024-08-01'
        
    ORDER BY 
        c.fecha_cierre DESC,
        c.case_id
    """
    
    print("🔍 Ejecutando consulta: Casos cerrados por revisión manual de malware - ATO Fintech")
    print("📅 Período: Junio y Julio 2024")
    print("-" * 80)
    
    try:
        df = quick_query(query)
        
        if not df.empty:
            print(f"✅ Consulta ejecutada exitosamente!")
            print(f"📊 Total de casos encontrados: {len(df)}")
            print(f"📅 Rango de fechas: {df['fecha_cierre'].min()} a {df['fecha_cierre'].max()}")
            
            # Resumen por gestor
            if 'gestor_caso' in df.columns:
                gestores = df['gestor_caso'].value_counts()
                print(f"\n👥 Casos por gestor:")
                for gestor, cantidad in gestores.head(5).items():
                    print(f"   {gestor}: {cantidad} casos")
            
            # Resumen por mes
            df['mes'] = pd.to_datetime(df['fecha_cierre']).dt.strftime('%Y-%m')
            casos_por_mes = df['mes'].value_counts().sort_index()
            print(f"\n📈 Casos por mes:")
            for mes, cantidad in casos_por_mes.items():
                print(f"   {mes}: {cantidad} casos")
            
            print(f"\n📄 Primeras 5 filas:")
            print(df.head().to_string(max_cols=6))
            
            return df
            
        else:
            print("⚠️  No se encontraron casos con los criterios especificados")
            print("💡 Verificando si existen datos en las tablas...")
            return None
            
    except Exception as e:
        print(f"❌ Error ejecutando consulta: {e}")
        print("\n🔧 Intentando consulta de verificación...")
        return verificar_estructura_tablas()

def verificar_estructura_tablas():
    """Verifica la estructura de las tablas para ajustar la consulta"""
    
    print("\n🔍 Verificando estructura de las tablas...")
    
    # Verificar tabla CONSULTAS_ATO
    query_estructura1 = """
    SELECT 
        column_name,
        data_type
    FROM 
        `meli-bi-data.SBOX_PFFINTECHATO.INFORMATION_SCHEMA.COLUMNS`
    WHERE 
        table_name = 'CONSULTAS_ATO'
    ORDER BY 
        ordinal_position
    LIMIT 10
    """
    
    try:
        print("\n📊 Estructura de CONSULTAS_ATO:")
        df_struct1 = quick_query(query_estructura1)
        print(df_struct1.to_string(index=False))
    except Exception as e:
        print(f"❌ Error verificando CONSULTAS_ATO: {e}")
    
    # Verificar tabla BT_ACTION_MR
    query_estructura2 = """
    SELECT 
        column_name,
        data_type
    FROM 
        `meli-bi-data.WHOWNER.INFORMATION_SCHEMA.COLUMNS`
    WHERE 
        table_name = 'BT_ACTION_MR'
    ORDER BY 
        ordinal_position
    LIMIT 10
    """
    
    try:
        print("\n📊 Estructura de BT_ACTION_MR:")
        df_struct2 = quick_query(query_estructura2)
        print(df_struct2.to_string(index=False))
    except Exception as e:
        print(f"❌ Error verificando BT_ACTION_MR: {e}")
    
    return None

def consulta_exploratoria():
    """Consulta exploratoria para entender mejor los datos"""
    
    print("\n🔍 CONSULTA EXPLORATORIA")
    print("-" * 50)
    
    # Explorar tabla CONSULTAS_ATO
    query_explore1 = """
    SELECT 
        COUNT(*) as total_registros,
        COUNT(DISTINCT EXTRACT(YEAR FROM fecha_cierre)) as años_disponibles,
        MIN(fecha_cierre) as fecha_min,
        MAX(fecha_cierre) as fecha_max
    FROM 
        `meli-bi-data.SBOX_PFFINTECHATO.CONSULTAS_ATO`
    WHERE 
        fecha_cierre IS NOT NULL
    """
    
    try:
        print("📊 Resumen de CONSULTAS_ATO:")
        df_explore1 = quick_query(query_explore1)
        print(df_explore1.to_string(index=False))
    except Exception as e:
        print(f"❌ Error explorando CONSULTAS_ATO: {e}")

if __name__ == "__main__":
    # Ejecutar consulta principal
    df_resultado = consulta_casos_malware_ato()
    
    # Si hay problemas, ejecutar consultas exploratorias
    if df_resultado is None:
        consulta_exploratoria() 