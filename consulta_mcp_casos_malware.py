#!/usr/bin/env python3
"""
Consulta específica usando MCP BigQuery: Casos cerrados por revisión manual de malware - ATO Fintech
Usando el MCP basado en fury_mcp-pf-bigquery-analizer
"""

import asyncio
import json
from mcp_bigquery_setup import MCPBigQueryBasicOperations

async def consulta_casos_malware_ato_fintech():
    """
    Ejecuta la consulta específica del usuario usando el MCP
    Tablas: meli-bi-data.SBOX_PFFINTECHATO.CONSULTAS_ATO y meli-bi-data.WHOWNER.BT_ACTION_MR
    """
    
    print("🔍 Ejecutando consulta usando MCP BigQuery")
    print("📋 Casos cerrados por revisión manual de malware - ATO Fintech")
    print("📅 Período: Junio y Julio 2024")
    print("-" * 80)
    
    # Inicializar operaciones MCP
    operations = MCPBigQueryBasicOperations("meli-bi-data", "US")
    
    # Inicializar cliente
    init_result = await operations.initialize()
    if init_result["status"] != "success":
        print(f"❌ Error inicializando MCP: {init_result['message']}")
        return None
    
    print("✅ MCP BigQuery inicializado correctamente")
    
    # Consulta específica del usuario
    query = """
    SELECT 
        c.case_id,
        c.user_id,
        c.fecha_cierre_caso as fecha_cierre,
        c.gestor_responsable as quien_gestiono,
        c.area,
        c.tipo_caso,
        c.estado_caso,
        c.motivo_cierre,
        b.action_type,
        b.action_result,
        b.reviewer_name,
        b.review_date
    FROM 
        `meli-bi-data.SBOX_PFFINTECHATO.CONSULTAS_ATO` c
    INNER JOIN 
        `meli-bi-data.WHOWNER.BT_ACTION_MR` b
        ON c.case_id = b.case_id
    WHERE 
        -- Filtros para área ATO fintech
        (
            UPPER(c.area) LIKE '%ATO%' 
            OR UPPER(c.area) LIKE '%FINTECH%'
            OR UPPER(c.tipo_caso) LIKE '%ATO%'
        )
        
        -- Filtros para revisión manual de malware
        AND (
            UPPER(c.tipo_caso) LIKE '%MALWARE%'
            OR UPPER(c.motivo_cierre) LIKE '%MALWARE%'
            OR UPPER(b.action_type) LIKE '%MANUAL%'
            OR UPPER(b.action_result) LIKE '%MALWARE%'
        )
        
        -- Casos cerrados
        AND (
            UPPER(c.estado_caso) = 'CERRADO'
            OR UPPER(c.estado_caso) = 'CLOSED'
            OR UPPER(c.estado_caso) = 'FINALIZADO'
        )
        
        -- Período: junio y julio 2024
        AND c.fecha_cierre_caso >= '2024-06-01'
        AND c.fecha_cierre_caso < '2024-08-01'
        
    ORDER BY 
        c.fecha_cierre_caso DESC,
        c.case_id
    """
    
    try:
        # Ejecutar consulta usando MCP
        print("📊 Ejecutando consulta con MCP...")
        result = await operations.execute_query(query, 100)  # Limitar a 100 resultados
        
        if result["status"] == "success":
            query_result = result["result"]
            rows = query_result["rows"]
            
            print(f"✅ Consulta ejecutada exitosamente!")
            print(f"📊 Total de casos encontrados: {len(rows)}")
            
            if query_result.get("job_info"):
                job_info = query_result["job_info"]
                print(f"💾 Bytes procesados: {job_info.get('bytes_processed', 'N/A'):,}")
                print(f"💰 Bytes facturados: {job_info.get('bytes_billed', 'N/A'):,}")
            
            if rows:
                print(f"\n📄 Primeros 5 casos:")
                print("-" * 120)
                print(f"{'Case ID':<15} {'User ID':<12} {'Fecha Cierre':<12} {'Gestor':<20} {'Área':<15} {'Motivo':<25}")
                print("-" * 120)
                
                for i, row in enumerate(rows[:5]):
                    case_id = str(row.get('case_id', 'N/A'))[:14]
                    user_id = str(row.get('user_id', 'N/A'))[:11]
                    fecha = str(row.get('fecha_cierre', 'N/A'))[:11]
                    gestor = str(row.get('quien_gestiono', 'N/A'))[:19]
                    area = str(row.get('area', 'N/A'))[:14]
                    motivo = str(row.get('motivo_cierre', 'N/A'))[:24]
                    
                    print(f"{case_id:<15} {user_id:<12} {fecha:<12} {gestor:<20} {area:<15} {motivo:<25}")
                
                # Estadísticas adicionales
                print(f"\n📈 Estadísticas:")
                
                # Casos por gestor
                gestores = {}
                for row in rows:
                    gestor = row.get('quien_gestiono', 'Sin asignar')
                    gestores[gestor] = gestores.get(gestor, 0) + 1
                
                print(f"👥 Casos por gestor:")
                for gestor, cantidad in sorted(gestores.items(), key=lambda x: x[1], reverse=True)[:5]:
                    print(f"   {gestor}: {cantidad} casos")
                
                # Casos por mes
                meses = {}
                for row in rows:
                    fecha = row.get('fecha_cierre', '')
                    if fecha:
                        mes = fecha[:7]  # YYYY-MM
                        meses[mes] = meses.get(mes, 0) + 1
                
                print(f"\n📅 Casos por mes:")
                for mes, cantidad in sorted(meses.items()):
                    print(f"   {mes}: {cantidad} casos")
                
            else:
                print("⚠️  No se encontraron casos con los criterios especificados")
                
                # Sugerir verificar datos
                print("\n💡 Sugerencias para verificar:")
                print("1. Verificar nombres de columnas en las tablas")
                print("2. Verificar formato de fechas")
                print("3. Verificar valores en campos de área y tipo")
            
            return rows
            
        else:
            print(f"❌ Error ejecutando consulta: {result.get('error', 'Error desconocido')}")
            return None
            
    except Exception as e:
        print(f"❌ Error en consulta MCP: {e}")
        return None

async def verificar_estructura_tablas():
    """Verifica la estructura de las tablas para ajustar la consulta"""
    
    print("\n🔍 Verificando estructura de tablas usando MCP...")
    
    operations = MCPBigQueryBasicOperations("meli-bi-data", "US")
    
    # Inicializar
    await operations.initialize()
    
    # Verificar tabla CONSULTAS_ATO
    try:
        print("\n📊 Esquema de SBOX_PFFINTECHATO.CONSULTAS_ATO:")
        schema_result = await operations.get_table_schema("SBOX_PFFINTECHATO", "CONSULTAS_ATO")
        
        if schema_result["status"] == "success":
            schema = schema_result["result"]["schema"]
            print(f"Columnas encontradas ({len(schema)}):")
            for field in schema[:10]:  # Mostrar solo las primeras 10
                print(f"   - {field['name']} ({field['type']})")
        else:
            print(f"❌ Error: {schema_result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"❌ Error verificando CONSULTAS_ATO: {e}")
    
    # Verificar tabla BT_ACTION_MR
    try:
        print("\n📊 Esquema de WHOWNER.BT_ACTION_MR:")
        schema_result = await operations.get_table_schema("WHOWNER", "BT_ACTION_MR")
        
        if schema_result["status"] == "success":
            schema = schema_result["result"]["schema"]
            print(f"Columnas encontradas ({len(schema)}):")
            for field in schema[:10]:  # Mostrar solo las primeras 10
                print(f"   - {field['name']} ({field['type']})")
        else:
            print(f"❌ Error: {schema_result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"❌ Error verificando BT_ACTION_MR: {e}")

async def main():
    """Función principal"""
    print("🚀 Consulta de casos ATO fintech usando MCP BigQuery")
    print("📋 Basado en fury_mcp-pf-bigquery-analizer de MercadoLibre")
    print("=" * 80)
    
    # Ejecutar consulta principal
    casos = await consulta_casos_malware_ato_fintech()
    
    # Si no hay resultados, verificar estructura
    if not casos:
        await verificar_estructura_tablas()

if __name__ == "__main__":
    asyncio.run(main()) 